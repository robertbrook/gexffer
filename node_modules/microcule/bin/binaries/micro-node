#!/usr/bin/env node
/*
  Spawns a service as a child process
  
  Takes in a JavaScript microservice as a string over argv,
  runs it using `run-service` module, and pipes results to STDOUT
  
  **Note: This script is intended to be run inside a chroot jail**
  
  Microservices are expected to take in two streams ( input / output )

  In most cases these input / output streams will be http req / res.

  HTTP Request Input <=> process.stdin
  HTTP Response Output <=> process.stdout
  
  Arguments:

    -c - The source code of the service
    -s - Meta-data about the service
    -e - The environment config to run the service in
    -v - The virtual machine config to run the service in

*/

// TODO: make DNS punch configurable ( useful for dev )
// Punch DNS lookup, because copying BIND and system resolver into the chroot is much files to copy, 
// this uses node's built-in resolver ( perhaps c-ares ? )
//var _dns=require('dns');
//var dns = require('native-dns');
//var net=require('net');
//_dns.lookup = dns.lookup;

// parse incoming command line arguments
var argv = require('minimist')(process.argv.slice(2));
var net = require('net');

if (typeof argv.c === "undefined" || argv.c.length === 0) {
  console.log('Source code required. Please pass in -c option');
  process.exit();
}

var code = argv.c;
var service = argv.s;

try {
  service = JSON.parse(service);
} catch (err) {
  service = {
    "owner": "error"
  };
}


// pipe3 is an additional STDIO pipe we can use for HTTP response methods, debugging events, logging events, and other out of band comms
var pipe3 = new net.Socket({ fd: 3 });

// babel support for es6 / es7
// the spawned child needs regenerator run-time here
if (service.language === "babel" || service.language === "es7") {
  // service is es6+, so convert it to normal javascript
  // TODO: This may cause peformance issues, could be better to cache transpile of code or use updated node binary with flag
  require("babel-polyfill");
}

var rs = require('run-service');

// create a new writable stream to wrap / handle STDOUT
var Writable = require('stream').Writable;
var output = Writable();

// anytime output is written to, write the result to the command line
output._write = function (chunk, enc, next) {
  //console.log('writing chunk', chunk)
  process.stdout.write(chunk);
  //  console.log(chunk); // TODO: remove string?
  next();
};

// TODO: move response mocking code to separate module
// use STDERR as a channel for sending out of stream information ( like setting headers )
output.addTrailers = function (headers) {
  var message = {
    "type": "addTrailers",
    "payload": {
      "headers": headers
    }
  };
  pipe3.write(JSON.stringify(message) + '\n');
};

output.removeHeader = function (name) {
  var message = {
    "type": "removeHeader",
    "payload": {
      "name": name
    }
  };
  pipe3.write(JSON.stringify(message) + '\n');
};

output.setHeader = function (name, value) {
  var message = {
    "type": "setHeader",
    "payload": {
      "name": name,
      "value": value
    }
  };
  pipe3.write(JSON.stringify(message) + '\n');
};

output.setTimeout = function (msecs, cb) {
  // TODO: add optional callback argument?
  var message = {
    "type": "setTimeout",
    "payload": {
      "msecs": msecs
    }
  };
  pipe3.write(JSON.stringify(message) + '\n');
};

output.sendDate = function (value) {
  var message = {
    "type": "sendDate",
    "payload": {
      "value": value
    }
  };
  pipe3.write(JSON.stringify(message) + '\n');
};

output.statusMessage = function (value) {
  var message = {
    "type": "statusMessage",
    "payload": {
      "value": value
    }
  };
  pipe3.write(JSON.stringify(message) + '\n');
};

// Using Object.defineProperty
Object.defineProperty(output, 'statusCode', {
  set: function(value) {
    var message = {
      "type": "statusCode",
      "payload": {
        "value": value
      }
    };
    pipe3.write(JSON.stringify(message) + '\n');
  }
});

output.writeContinue = function () {
  var message = {
    "type": "writeContinue",
    "payload": {
    }
  };
  pipe3.write(JSON.stringify(message) + '\n');
};

output.writeHead = function (code, headers) {
  var message = {
    "type": "writeHead",
    "payload": {
      "code": code,
      "headers": headers
    }
  };
  pipe3.write(JSON.stringify(message) + '\n');
};

// Capture any stream errors
output.on('error', function (err) {
  pipe3.write(JSON.stringify({ type: "error", payload: { error: err.message, code: err.code } }));
  process.exit();
});


// When .json is called, exit the process with a JSON dump
output.json = function json (data) {
  if (typeof data !== 'undefined') {
    console.log(JSON.stringify(data, true, 2));
  }
  pipe3.write(JSON.stringify({ type: "end" }));
  process.exit();
};

// When the response has been ended, exit the process
output.end = function end (data) {
  if (typeof data !== 'undefined') {
    console.log(data);
  }
  pipe3.write(JSON.stringify({ type: "end" }));
  process.exit();
};

// Custom errorHandler for `run-service` execution
function errorHandler (err) {
  if (err) {
    pipe3.write(JSON.stringify({ type: "error", payload: { error: err.message, code: err.code } }));
    process.exit();
  }
};

// parse the incoming service env from argv
var env = JSON.parse(argv.e);

/* TODO: add ability to proxy request parameters back to middleware chain
  //console.log(process.stdin)
  for (var p in env.input) {
    process.stdin[p] = env.input[p];
  }
  //console.log(Object.keys(env.input))
  if (typeof env.input.xxxx !== 'undefined') {
    //process.stdin.xxxx = env.input.xxxx;
  }
  // process.stdin.env = {};

*/

// Map some familiar HTTP request information to input stream ( services need this data )
process.stdin.method = env.input.method;
process.stdin.path = env.input.path;
process.stdin.params = env.input.params;
process.stdin.headers = env.input.headers;
process.stdin.host = env.input.host;
process.stdin.url = env.input.url;
process.stdin.connection = env.input.connection;
process.stdin.resource = { params: {}};

// Send logs to stderr as JSON message
var debug = function debug () {
  var args = [];
  for (var a in arguments) {
    args.push(arguments[a]);
  }
  if (args.length === 1) {
    args = args[0];
  }
  pipe3.write(JSON.stringify({ type: "log", payload: { entry: args } }));
  return;
};

/* TODO: implement handlers for IPC messages
// new IPC stdio[3] communication logic
// sends IPC message to parent
function _send (message) {
  process.send(message);
}
process.on('message', function (m){
  console.log('pmessage ' + JSON.stringify(m));
});
*/

var serviceEnv = {};

// Remark: serviceEnv object is used to populate the microservice object passed into your code
// You may customize this file as you wish
// I've added an if statement which hook.io uses for additional SDK and microservice helper methods

// Note: This block of code is unused by default
if (env.isHookio) {

  var sdk = require('hook.io-sdk');
  var dev = {
    host: "0.0.0.0",
    port: 9999,
    protocol: "http://",
    hook_private_key: env.hookAccessKey
  }
  var client = sdk.createClient(dev);
  serviceEnv.client = client;
  serviceEnv.datastore = client.datastore;
  serviceEnv.keys = client.keys;
  serviceEnv.fs = client.files;
  serviceEnv.logs = client.logs;
  serviceEnv.sdk = client;
}

function _require (module) {
  // console.log(module, require.paths, process.cwd())
  // Note: This seems wrong, but we want to require from the path microcule binary is running at
  // In other cases, we may want to instead fallback to normal node.js lookups ( which are looking for modules in *this* project directory )

  // first look for module in current working directory
  try {
    return require(process.cwd() + '/node_modules/' + module);
  } catch (err) {

  }
  // if that fails, fallback to normal node.js lookups
  return require(module);
}

// Note: Do we need to add this back for streaming multipart uploads?
// TODO: Add tests for multipart file uploads ( may not be working )
// var psr = require('parse-service-request');
/*
psr(process.stdin, output, function (req, res, fields) {

  for (var p in fields) {
    env.params[p] = fields[p];
  }
*/

/* TODO: add ability to proxy request parameters to middleware chain
var proxy = new Proxy(process.stdin, {
  get: function(target, name) {
    // console.log("Getting pproperty '" + name + "'", env.input[name]);
     if (!(name in target)) {
       //console.log("Getting non-existant property '" + name + "'");
       return undefined;
     }
     return target[name];
   },
   set: function(target, name, value) {
    //console.log("Setting property '" + name + "', initial value: " + value);
    if (!(name in target)) {
      //   console.log("Setting non-existant property '" + name + "', initial value: " + value);
      pipe3.write(JSON.stringify({ type: "setvar", payload: { key: name, value: value } }));
    }
    target[name] = value;
    return true;
   }
});
*/

/* TODO: add ability to send proxied params back to parent process
  // sets key value on input stream ( useful for middleware processing later )
  process.stdin.set = function (key, value) {
    pipe3.write(JSON.stringify({ type: "setvar", payload: { key: key, value: value } }));
  };
*/

// serviceEnv.req = proxy;
serviceEnv.req = process.stdin;
serviceEnv.res = output;
serviceEnv.env = env.env;
serviceEnv.params = env.params;
serviceEnv.resource = env.resource;
serviceEnv.isStreaming = env.isStreaming;
serviceEnv.customTimeout = env.customTimeout;
serviceEnv.debug = debug;

rs({
  service: code,
  env: serviceEnv,
  vm: {
    console: {
      log: debug,
      error: debug
    },
    setTimeout: setTimeout,
   __dirname: __dirname,
   require: _require,
   Buffer: Buffer
 },
 errorHandler: errorHandler
})(function (err, result) {
  // callback / promise API
  if (err) {
    errorHandler(err);
  }
  // Note: Do not write undefined output
  if (result) {
    output.write(result);
  }
  // Remark: We are no longed calling output.end() and instead we exit the process
  // This should allow for services which don't explictly end requests ( like middlewares )
  process.exit();
});