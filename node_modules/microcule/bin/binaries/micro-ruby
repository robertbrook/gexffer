#!/usr/bin/env ruby

require 'json'

# simple logging method
def log(*args)
  jsonMessage = "{ \"type\": \"log\", \"payload\" : { \"entry\": #{args.to_json} } }"
  STDERR.puts jsonMessage
end

# service source code is passed in through -c "string" ( second item in argv array )
code = ARGV[1]

# service enviroment code is passed in through -e "json string" ( third item in argv array )
_env = JSON.parse(ARGV[3])

# assign hook enviroment to Hook variables ( contains params / env / etc )
Hook = _env

# map Hook.env variables to ENV ruby scope ( for convenience )
_env['env'].each do |k, v|
  # string values can be set as-is
  if v.is_a?(String)
    # puts "string #{k} #{v}"
    ENV[k] = v
  end

  # object values need to be converted to JSON, or else Ruby will error
  if v.is_a?(Object)
    # puts "object #{k} #{v}"
    ENV[k] = v.to_json
  end

end

# TODO: do something with service
service = ARGV[5]

# TODO: better error checking around eval
eval code