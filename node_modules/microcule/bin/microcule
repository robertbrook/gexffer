#!/usr/bin/env node

var microcule = require('../');
var config = require('../config');
// parse incoming command line arguments
var argv = require('minimist')(process.argv.slice(2));
var script = argv._[0];
var stdin = process.stdin;
var http;

config.SERVICE_MAX_TIMEOUT = argv.t ||  argv.timeout || config.SERVICE_MAX_TIMEOUT;
config.http = config.http || {};
config.http.host = argv.h ||  argv.host || config.http.host;
config.http.port = argv.p ||  argv.port || config.http.port;
config.watch = argv.w ||  argv.watch || config.watch;
config.stream = argv.s ||  argv.stream || config.stream;

// default to releasing compiled binaries to current working directory of `microcule` binary
config.releaseDir = config.releaseDir || process.cwd();

if (typeof argv.v !== "undefined" || typeof argv.version !== "undefined") {
  var pkg = require('../package.json')
  console.log(pkg.version)
  process.exit();
}

if (script === "help") {
  showHelp();
  process.exit();
}

if (typeof script === "undefined" && stdin.isTTY) {
  console.log('path to script is a required argument');
  showHelp();
  process.exit();
}

var path = require('path');
var requireServiceSync = require('../lib/requireServiceSync');

var logger = require('../lib/plugins/logger');
var mschema = require('../lib/plugins/mschema');
var bodyParser = require('../lib/plugins/bodyParser');
var viewPresenter = require('../lib/viewPresenter');

var servicePath = path.resolve(process.cwd() + "/" + script);
var _service;

try {
  _service = requireServiceSync({ path: servicePath });
} catch (err) {
  if (err.code === 'ENOENT') {
    // if we could not find the service, attempt to see if it's a globally available binary
    // TODO: consider using https://github.com/mathisonian/command-exists library
    var commandExists = true;
    // if the command exists, assume we are spawning an arbitrary binary with argv as it's arguments
    if (commandExists) {
      _service = {
        bin: script,
        argv: process.argv.slice(3)
      }
    } else {
      throw err;
    }
  }
}

// language override
if (typeof argv.l !== "undefined" || typeof argv.language !== "undefined") {
  _service.language = argv.l || argv.language;
}

if (stdin.isTTY) {
  // console.log('ignoring will not run in TTY mode')
  // helps with peformance of STDIN tool
  http = require('resource-http');
  startServer(_service);
  return;
} else {
  startSTDIN(_service);
}

function showHelp () {
  console.log('Usage: microcule [command] [options] ./path/to/script.foo');
  console.log(' ');
  console.log('Commands:');
  console.log(' ');
  console.log('  help  Display help');
  console.log(' ');
  console.log('Options:');
  console.log('  -t, --timeout <number>  Sets max timeout of service in milliseconds');
  console.log('  -h, --host <value>      Host to listen on');
  console.log('  -p, --port <number>     Port to listen on');
  console.log('  -l, --language <value>  Target programming language');
  console.log('  -s, --stream <bool>     Enables stream processing for ( STDIN usage only ) ');
  console.log('  -w, --watch <bool>      Reloads source files on every request ( dev only )');
  console.log('  -v, --version           Output the version number');
}

function startSTDIN (service) {

  var ret = '';

  var opts = {
    mode: 'buffer'
  };

  var opts = {
    mode: 'stream'
  };

  var Readable = require('stream').Readable;
  var Writable = require('stream').Writable;

  var input = new Readable;
  var output = Writable();

  output._write = function (chunk, enc, next) {
    // console.log('wirtint out',chunk.toString());
    process.stdout.write(chunk);
    next();
  };

  output.on('error', function(err){
    console.log('err', err)
  });

  output.on('end', function(err){
    process.exit();
  });

  stdin.setEncoding('utf8');
  if (config.stream) {
    // if we are in streaming mode, check to see if existing stream exists
    // if so, write some data to it
    // TODO: write to spawned MC stream
    // if no, spawn a new stream and write this first data to it
    // TODO: mc.spawn
    stdin.resource = {
      params: {
        STDIN: result
      }
    };
    microcule.plugins.spawn({
      bin: service.bin,
      argv: service.argv,
      code: service.code,
      schema: service.schema,
      view: service.view,
      presenter: service.presenter,
      releaseDir: config.releaseDir,
      language: service.language,
      config: config,
      log: console.log
    })(stdin, output, function(){
      // console.log("COMPLETED STREAMING SERVICE")
    });
  } else {
    var result = '';
    stdin.on('end', function () {
      // console.log(ret);
      stdin.resource = {
        params: {
          STDIN: result
        }
      };
      // console.log('spawning service'.yellow)
      microcule.plugins.spawn({
        bin: service.bin,
        argv: service.argv,
        code: service.code,
        schema: service.schema,
        view: service.view,
        presenter: service.presenter,
        releaseDir: config.releaseDir,
        language: service.language,
        config: config,
        log: console.log
      })(stdin, output, function(){
        // console.log("COMPLETED BUFFER SERVICE")
      });
    });
    // if we are in non-streaming buffer mode,
    // then every time STDIN is received from `microcule`, we will execute a fresh function
    stdin.on('readable', function () {
        var chunk;
        while ((chunk = stdin.read())) {
          result += chunk.toString();
        }
    });
  }
}

function startServer (_service) {
  http.listen(config.http, function(err, app){
    var addr = app.server.address();

    if (typeof _service.schema === "object") {
      console.log('using schema for service. see: mschema for more details')
      console.log(_service.schema);
    }

    if (_service.view && _service.view.length > 0 ) {
      console.log('using view for service')
    }

    if (typeof _service.presenter === "function") {
      console.log('using presenter for service')
    }

    console.log(_service.language + ' microcule started at: http://' +  addr.address + ":" + addr.port);

    // Remark: Will automatically map the process.env `microcule` was spawned in to the service.env of the spawned function
    config.env = process.env;

    app.use(logger());
    app.use(bodyParser());

    if (_service.schema) {
      app.use(mschema(_service.schema));
    }

    app.use(function watchSpawn (req, res, next) {
      // Remark: If config.watch or argv is detected, reload the script on every request
      // TODO: we could use an MD5 checksum or mtime to only reload the script on actual changes
      if (config.watch === "true" || config.watch === true) {
        // TODO: fix / add back the working async requireService method
        /*
        requireService({ path: process.cwd() + "/" + script, language: targetLang }, function (err, __service) {
          if (err) {
            throw err;
          }
          spawnService(__service);
        });
        */
        spawnService(requireServiceSync({ path: servicePath }));
      } else {
        spawnService(_service)
      }

      function spawnService (service) {
        // TODO: move viewPresenter back into proper plugin
        if (_service.view) {
          viewPresenter({
            view: _service.view,
            presenter: _service.presenter
          }, req, res, function(err, req, output){
            if (err) {
              return next(err);
            }
            microcule.plugins.spawn({
              bin: service.bin,
              argv: service.argv,
              code: service.code,
              schema: service.schema,
              view: service.view,
              presenter: service.presenter,
              releaseDir: config.releaseDir,
              language: service.language,
              config: config,
              log: console.log
            })(req, output, function(){
              // if we made it here, it means no services called res.end()
              // we should end the service ( or else it will hang forever )
              output.end();
            });
          });
        } else {
          microcule.plugins.spawn({
            bin: service.bin,
            argv: service.argv,
            code: service.code,
            schema: service.schema,
            view: service.view,
            presenter: service.presenter,
            releaseDir: config.releaseDir,
            language: service.language,
            config: config,
            log: console.log
          })(req, res, function(){
            // if we made it here, it means no services called res.end()
            // we should end the service ( or else it will hang forever )
            res.end();
          });
        }
      }
    });
  });
}
