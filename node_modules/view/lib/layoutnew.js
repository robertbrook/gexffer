var query = require('./query');

function findChildLayoutView (view) {
  console.log('findChildLayoutView', view)
  if (typeof view.parent.views !== "object") {
    return null;
  }
  
  if (Object.keys(view.parent.views).length === 0) {
    return null;
  }
  
  for (var v in view.parent.views) {
    if (typeof view.parent.views[v] === "object") {
      for (var sv in view.parent.views[v]) {
        if (sv === "layout") {
          return view.parent.views[v][sv];
        }
      }
    }
  }

  return null;
  
}


function findParentLayoutView (view) {
  console.log('vvv', view.name, view)

  // recursively looks up the View tree to find the closest parent layout ( if it exists )
  //console.log('isRoot', view._root, view)
  if (typeof view.layout !== "undefined" && typeof view.layout.presenter === "function") {
    return view.layout;
  }

  if (typeof view.parent.layout !== "undefined") {
    // a parent view exists, and it has a layout, use that layout
    // note: layouts are not currently nested. the closest layout ( local or parent ) will always take precedence
    return view.parent.layout;
  }

  if (typeof view.parent === "undefined") {
    // we have reached the top of the View tree
    // this is the root and no layout can exist above it
    return null;
  }


  if (typeof view === "undefined") {
    // we have reached the top of the View tree
    // this is the root and no layout can exist above it
    return null;
  }

  if (typeof view.parent.parent === "undefined") {
    // we have reached the top of the View tree
    // this is the root and no layout can exist above it
    //return null;
  }



  // there is a parent, and it doesn't contain a valid layout.
  // try finding a new layout up one level of the View tree
  return findParentLayoutView(view.parent);

};

function applyLayout(self, view, data, cb) {
  //console.log(parentLayoutView)
  
  var childLayoutView = findChildLayoutView(view);
  console.log("FFFFF", childLayoutView)
  if (childLayoutView !== null && typeof childLayoutView.present === "function") {
    return childLayoutView.present(data, function (err, content) {
      var $ = query(content);
      console.log('ccc', childLayoutView.template)
      $('.yield').append(childLayoutView.template);
      var parentLayoutView = findParentLayoutView(view);
        
      return parentLayoutView.present(data, function(err, content) {
        var $$ = query(content);
        $$('.yield').append(view.template);
        $('.yield').append($$.html())
        return cb(null, $.html());
      });   
      
      return cb(null, $.html());
    });
  } else {
    var parentLayoutView = findParentLayoutView(view);
    if (parentLayoutView !== null && typeof parentLayoutView.present === "function" /* && parentLayoutView.parent.name !== ""*/) {
      if (cb) {
        return parentLayoutView.present(data, function(err, content) {
          var $ = query(content);
          $('.yield').append(view.template);
          return cb(null, $.html());
        });   
        /*
          //return applyLayout(self, parentLayoutView, data, cb);
        */
      } else {
        $ = query(parentLayoutView.present(data));
        $('.yield').append(view.template);
      }
    } else {
      if (parentLayoutView !== null && parentLayoutView.layout && parentLayoutView.layout.template !== "undefined") {
        $ = query(parentLayoutView.template);
        $('.yield').append(view.template);
      } else {
        $ = query(view.template);
      }
      if (cb) {
        return cb(null, $.html());
      } else {
        return $.html();
      }
    }
  }
  
 
}

module['exports'] = function (view, data, cb) {
  var $;
  var self = this;
  applyLayout(self, view, data, cb);
};